---
import Card from "../ui/Card.astro";
import type { WordPressPost } from "../../types/wordpress";
import type { Language } from "../../utils/i18n";
import { translations } from "../../utils/i18n";
import { wordpressClient } from "../../utils/wordpressClient";

export interface Props {
  post: WordPressPost;
  lang: Language;
  translationSlug?: string | null;
  showMetadata?: boolean;
}

const { post, lang, translationSlug = null, showMetadata = true } = Astro.props;
const t = translations[lang];

const availableTranslations = post.translations || [];
const currentLanguage = post.language?.code.toLowerCase() || lang;

const cleanContent = post.content
  .replace(/<[^>]*>/g, "")
  .replace(/&nbsp;/g, " ")
  .replace(/&amp;/g, "&")
  .trim();

const postDate = new Date(post.date);
const formattedDate = postDate.toLocaleDateString(lang, {
  year: "numeric",
  month: "long",
  day: "numeric",
});
---

<Card brutal class="max-w-3xl mx-auto">
  <article class="prose prose-brutal mx-auto">
    <header>
      <h1>{post.title}</h1>

      {
        showMetadata && (
          <div class="flex flex-wrap items-center gap-4 mb-6 text-sm text-onSurfaceVariant font-mono">
            <time datetime={post.date}>{formattedDate}</time>
            {post.author && (
              <span>
                {lang === "es" ? "Por" : "By"} {post.author.node.name}
              </span>
            )}
            {post.language && (
              <span class="px-2 py-1 bg-primary text-onPrimary text-xs font-mono uppercase border-2 border-primary">
                {post.language.name}
              </span>
            )}
          </div>
        )
      }
    </header>

    <div
      class="whitespace-pre-line text-onSurface font-sans text-base leading-relaxed"
    >
      {cleanContent}
    </div>

    {
      showMetadata &&
        (post.categories?.nodes.length || post.tags?.nodes.length) && (
          <div class="mt-8 pt-6 border-t-2 border-outline">
            {post.categories?.nodes.length && (
              <div class="mb-4">
                <h3 class="text-sm font-mono font-bold text-onSurfaceVariant uppercase tracking-wide mb-2">
                  {lang === "es" ? "Categorías" : "Categories"}
                </h3>
                <div class="flex flex-wrap gap-2">
                  {post.categories.nodes.map((category) => (
                    <span class="px-3 py-1 bg-secondaryContainer text-onSecondaryContainer text-xs font-mono uppercase border-2 border-secondary">
                      {category.name}
                    </span>
                  ))}
                </div>
              </div>
            )}

            {post.tags?.nodes.length && (
              <div>
                <h3 class="text-sm font-mono font-bold text-onSurfaceVariant uppercase tracking-wide mb-2">
                  {lang === "es" ? "Etiquetas" : "Tags"}
                </h3>
                <div class="flex flex-wrap gap-2">
                  {post.tags.nodes.map((tag) => (
                    <span class="px-2 py-1 bg-surfaceVariant text-onSurfaceVariant text-xs font-mono uppercase border-2 border-outline">
                      #{tag.name}
                    </span>
                  ))}
                </div>
              </div>
            )}
          </div>
        )
    }

    {
      (availableTranslations.length > 0 || translationSlug) && (
        <footer class="mt-12 pt-6 border-t-2 border-outline">
          <h3 class="text-sm font-mono font-bold text-onSurfaceVariant uppercase tracking-wide mb-3">
            {lang === "es"
              ? "Traducciones disponibles"
              : "Available translations"}
          </h3>

          <div class="space-y-2 font-mono text-sm">
            <div class="flex items-center gap-2">
              <span class="w-2 h-2 bg-primary border-2 border-primary" />
              <span class="text-onSurfaceVariant">
                {lang === "es"
                  ? "Estás viendo la versión en"
                  : "You're viewing the"}{" "}
                <strong class="text-onSurface">
                  {post.language?.name ||
                    (currentLanguage === "es" ? "Español" : "English")}
                </strong>
              </span>
            </div>

            {availableTranslations.map((translation) => {
              const translationLang = translation.language.code.toLowerCase();
              const translationPath = `/${translationLang}/${translation.slug}/`;
              const isCurrent = translationLang === currentLanguage;
              if (isCurrent) return null;

              return (
                <div class="flex items-center gap-2">
                  <span class="w-2 h-2 bg-outlineVariant border-2 border-outlineVariant" />
                  <a
                    href={translationPath}
                    class="text-primary hover:text-primary-dark font-mono uppercase border-b-2 border-primary"
                  >
                    {translation.title} (
                    {translationLang === "es" ? "ES" : "EN"})
                  </a>
                </div>
              );
            })}

            {translationSlug && availableTranslations.length === 0 && (
              <div class="flex items-center gap-2">
                <span class="w-2 h-2 bg-outlineVariant border-2 border-outlineVariant" />
                <a
                  href={`/${translationSlug}/`}
                  class="text-primary hover:text-primary-dark font-mono uppercase border-b-2 border-primary"
                >
                  {lang === "es" ? "Leer en inglés" : "Read in Spanish"}
                </a>
              </div>
            )}
          </div>
        </footer>
      )
    }
  </article>
</Card>
