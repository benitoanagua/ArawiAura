---
import Card from "../ui/Card.astro";
import type { WordPressPost } from "../../types/wordpress";
import type { Language } from "../../utils/i18n";

export interface Props {
  post: WordPressPost;
  lang: Language;
  translationSlug?: string | null;
  showMetadata?: boolean;
}

const { post, lang, translationSlug = null, showMetadata = true } = Astro.props;

// Get all available translations
const availableTranslations = post.translations || [];
const currentLanguage = post.language?.code.toLowerCase() || lang;

// Clean HTML content and preserve line breaks
const cleanContent = post.content
  .replace(/<[^>]*>/g, "") // Remove HTML tags
  .replace(/&nbsp;/g, " ") // Replace &nbsp; with regular spaces
  .replace(/&amp;/g, "&") // Replace &amp; with &
  .replace(/&lt;/g, "<") // Replace &lt; with <
  .replace(/&gt;/g, ">") // Replace &gt; with >
  .replace(/&quot;/g, '"') // Replace &quot; with "
  .trim();

// Format date
const postDate = new Date(post.date);
const formattedDate = postDate.toLocaleDateString(lang, {
  year: "numeric",
  month: "long",
  day: "numeric",
});
---

<Card elevated class="max-w-3xl mx-auto brutal-shadow">
  <article class="prose mx-auto">
    <header>
      <h1 class="text-3xl font-bold text-onSurface mb-2 font-mono">
        {post.title}
      </h1>

      {
        showMetadata && (
          <div class="flex flex-wrap items-center gap-4 mb-6 text-sm text-onSurfaceVariant font-mono">
            <time datetime={post.date}>{formattedDate}</time>

            {post.author && (
              <span>
                {lang === "es" ? "Por" : "By"} {post.author.node.name}
              </span>
            )}

            {post.language && (
              <span class="px-2 py-1 bg-primaryContainer text-onPrimaryContainer rounded-sm text-xs uppercase brutal-border">
                {post.language.name}
              </span>
            )}
          </div>
        )
      }
    </header>

    <div
      class="whitespace-pre-line text-onSurface leading-relaxed text-lg font-sans"
    >
      {cleanContent}
    </div>

    {
      showMetadata &&
        (post.categories?.nodes.length || post.tags?.nodes.length) && (
          <div class="mt-8 pt-6 border-t-3 border-outline">
            {post.categories?.nodes.length && (
              <div class="mb-4">
                <h3 class="text-sm font-semibold text-onSurfaceVariant mb-2 uppercase tracking-wide font-mono">
                  {lang === "es" ? "Categorías" : "Categories"}
                </h3>
                <div class="flex flex-wrap gap-2">
                  {post.categories.nodes.map((category) => (
                    <span class="px-3 py-1 bg-secondaryContainer text-onSecondaryContainer rounded-sm text-sm brutal-border font-mono">
                      {category.name}
                    </span>
                  ))}
                </div>
              </div>
            )}

            {post.tags?.nodes.length && (
              <div>
                <h3 class="text-sm font-semibold text-onSurfaceVariant mb-2 uppercase tracking-wide font-mono">
                  {lang === "es" ? "Etiquetas" : "Tags"}
                </h3>
                <div class="flex flex-wrap gap-2">
                  {post.tags.nodes.map((tag) => (
                    <span class="px-2 py-1 bg-surfaceVariant text-onSurfaceVariant rounded-sm text-xs brutal-border font-mono">
                      #{tag.name}
                    </span>
                  ))}
                </div>
              </div>
            )}
          </div>
        )
    }

    {
      (availableTranslations.length > 0 || translationSlug) && (
        <footer class="mt-12 pt-6 border-t-3 border-outline">
          <h3 class="text-sm font-semibold text-onSurfaceVariant mb-3 uppercase tracking-wide font-mono">
            {lang === "es"
              ? "Traducciones disponibles"
              : "Available translations"}
          </h3>

          <div class="space-y-2">
            {/* Show current language indicator */}
            <div class="flex items-center gap-2">
              <span class="w-2 h-2 bg-primary rounded-full" />
              <span class="text-onSurfaceVariant text-sm font-sans">
                {lang === "es"
                  ? "Estás viendo la versión en"
                  : "You're viewing the"}
                <strong class="text-onSurface ml-1 font-mono">
                  {post.language?.name ||
                    (currentLanguage === "es" ? "Español" : "English")}
                </strong>
              </span>
            </div>

            {/* Show available translations */}
            {availableTranslations.map((translation) => {
              const translationLang = translation.language.code.toLowerCase();
              const translationPath = `/${translationLang}/${translation.slug}/`;
              const isCurrent = translationLang === currentLanguage;

              if (isCurrent) return null; // Skip current language

              return (
                <div class="flex items-center gap-2">
                  <span class="w-2 h-2 bg-outline rounded-full" />
                  <a
                    href={translationPath}
                    class="text-primary hover:text-primary/80 transition-colors text-sm font-medium font-mono brutal-underline"
                  >
                    {translation.title} (
                    {translationLang === "es" ? "Español" : "English"})
                  </a>
                </div>
              );
            })}

            {/* Fallback for direct translation slug */}
            {translationSlug && availableTranslations.length === 0 && (
              <div class="flex items-center gap-2">
                <span class="w-2 h-2 bg-outline rounded-full" />
                <a
                  href={`/${translationSlug}/`}
                  class="text-primary hover:text-primary/80 transition-colors text-sm font-medium font-mono brutal-underline"
                >
                  {lang === "es" ? "Leer en inglés" : "Read in Spanish"}
                </a>
              </div>
            )}
          </div>
        </footer>
      )
    }
  </article>
</Card>

<style>
  /* Estilos específicos para poesía */
  .prose .poetry {
    font-family: var(--font-mono);
    font-weight: 400;
    line-height: 1.6;
    white-space: pre-line;
    margin: 2rem 0;
    padding: 2rem;
    background-color: var(--color-surfaceContainer);
    border: 3px solid var(--color-outline);
    border-left: 6px solid var(--color-primary);
  }
</style>
