---
export interface Props {
  variant?: "primary" | "secondary" | "outline" | "ghost" | "danger";
  size?: "small" | "medium" | "large";
  disabled?: boolean;
  href?: string;
  type?: "button" | "submit" | "reset";
  onClick?: string;
  class?: string;
}

const {
  variant = "primary",
  size = "medium",
  disabled = false,
  href,
  type = "button",
  onClick,
  class: className,
} = Astro.props;

const baseClasses = `
  inline-flex items-center justify-center
  font-mono font-bold uppercase tracking-wider
  border-3 border-solid cursor-pointer
  text-decoration-none user-select-none
  focus:outline-none
  disabled:pointer-events-none disabled:opacity-50
`;

const sizeClasses = {
  small: "px-4 py-2 text-xs",
  medium: "px-6 py-3 text-sm",
  large: "px-8 py-4 text-base",
};

const variantClasses = {
  primary: `
    bg-[var(--color-primary)] 
    text-[var(--color-onPrimary)] 
    border-[var(--color-primary)]
    shadow-brutal
    hover:bg-[var(--color-background)] 
    hover:text-[var(--color-primary)]
    brutal-shadow-hover
  `,
  secondary: `
    bg-[var(--color-secondary)] 
    text-[var(--color-onSecondary)] 
    border-[var(--color-secondary)]
    shadow-brutal
    hover:bg-[var(--color-background)] 
    hover:text-[var(--color-secondary)]
    brutal-shadow-hover
  `,
  outline: `
    bg-transparent 
    text-[var(--color-onSurface)] 
    border-[var(--color-outline)]
    shadow-brutal
    hover:bg-[var(--color-onSurface)] 
    hover:text-[var(--color-surface)]
    hover:border-[var(--color-onSurface)]
    brutal-shadow-hover
  `,
  ghost: `
    bg-transparent 
    text-[var(--color-onSurface)] 
    border-transparent
    hover:bg-[var(--color-surfaceContainer)] 
    hover:border-[var(--color-outline)]
  `,
  danger: `
    bg-[var(--color-error)] 
    text-[var(--color-onError)] 
    border-[var(--color-error)]
    shadow-brutal
    hover:bg-[var(--color-background)] 
    hover:text-[var(--color-error)]
    brutal-shadow-hover
  `,
};

const computedClasses = `
  ${baseClasses} 
  ${sizeClasses[size]} 
  ${variantClasses[variant]}
  ${className || ""}
`
  .replace(/\s+/g, " ")
  .trim();
---

{
  href ? (
    <a
      href={href}
      class={computedClasses}
      class:list={{
        "pointer-events-none opacity-50": disabled,
      }}
      aria-disabled={disabled}
    >
      <slot />
    </a>
  ) : (
    <button
      type={type}
      class={computedClasses}
      disabled={disabled}
      data-onclick={onClick}
    >
      <slot />
    </button>
  )
}
