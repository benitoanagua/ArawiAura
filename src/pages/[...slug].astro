---
import { getCollection } from "astro:content";
import MainLayout from "../layouts/MainLayout.astro";
import Card from "../components/ui/Card.astro";
import type { Language } from "../utils/i18n";
import { translations } from "../utils/i18n";

export async function getStaticPaths() {
  const poems = await getCollection("poems", (p) => !p.data.draft);

  // Lista de rutas que NO deben ser manejadas por esta ruta dinámica
  const excludedRoutes = [
    "android-chrome-192x192",
    "android-chrome-192x192.png",
    "icon-192x192.png",
    "favicon.ico",
    "site.webmanifest",
    "apple-touch-icon.png",
    "favicon-32x32.png",
    "favicon-16x16.png",
    "robots.txt",
    "sitemap.xml",
  ];

  return poems
    .filter((poem) => {
      // Excluir rutas que coincidan con archivos estáticos
      const slug = poem.slug;
      return !excludedRoutes.some(
        (excluded) => slug === excluded || slug.endsWith(`/${excluded}`)
      );
    })
    .map((poem) => ({
      params: { slug: poem.slug },
      props: { poem },
    }));
}

const { slug } = Astro.params;
const { poem } = Astro.props;

if (!poem) {
  throw new Error(`Poem not found for slug: ${slug}`);
}

const { Content } = await poem.render();
const langFromSlug = poem.slug.split("/")[0];
const validLang: Language =
  langFromSlug === "es" || langFromSlug === "en" ? langFromSlug : "en";
const t = translations[validLang];

// Función segura para obtener el nombre del formulario
const getFormName = (form: string) => {
  const formKey = `form_${form}` as keyof typeof t;
  return t[formKey] || form;
};

// Metadatos específicos para el poema
const pageTitle = poem.data.title;
const pageDescription =
  validLang === "es"
    ? `Lee "${poem.data.title}" - un poema en Arawi Aura`
    : `Read "${poem.data.title}" - a poem on Arawi Aura`;
---

<MainLayout
  title={pageTitle}
  description={pageDescription}
  lang={validLang}
  canonicalPath={`/${poem.slug}/`}
>
  <Card elevated class="max-w-3xl mx-auto">
    <article class="prose mx-auto">
      <h1 class="text-3xl font-bold text-onSurface">{poem.data.title}</h1>
      <time
        datetime={poem.data.date.toISOString()}
        class="text-onSurfaceVariant block mb-6"
      >
        {
          poem.data.date.toLocaleDateString(poem.data.lang, {
            year: "numeric",
            month: "long",
            day: "numeric",
          })
        }
      </time>

      <Content />

      {
        poem.data.translation && (
          <footer class="mt-12 pt-6 border-t border-outlineVariant">
            <p class="text-onSurfaceVariant">
              {poem.data.lang === "es"
                ? "También disponible en inglés:"
                : "Also available in Spanish:"}{" "}
              <a
                href={`/${poem.data.translation}/`}
                class="text-primary hover:text-primary/80 transition-colors"
              >
                {poem.data.lang === "es"
                  ? "Read translation"
                  : "Leer traducción"}
              </a>
            </p>
          </footer>
        )
      }
    </article>
  </Card>
</MainLayout>
