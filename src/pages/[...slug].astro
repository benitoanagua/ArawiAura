---
import MainLayout from "../layouts/MainLayout.astro";
import WordPressPostComponent from "../components/content/WordPressPost.astro";
import type { Language } from "../utils/i18n";
import { translations } from "../utils/i18n";
import { wordpressClient, type WordPressPost } from "../utils/wordpressClient";

export async function getStaticPaths() {
  try {
    // Get all posts to generate static paths
    const allPosts = await wordpressClient.getPosts(1000);
    const posts = allPosts.posts;

    const paths = posts.flatMap((post) => {
      const paths = [];

      // Main post path
      const postLang = (post.language?.code.toLowerCase() as Language) || "en";
      paths.push({
        params: { slug: `${postLang}/${post.slug}` },
        props: { post, lang: postLang, type: "post" },
      });

      // Translation paths if available
      if (post.translations) {
        post.translations.forEach((translation) => {
          const translationLang =
            translation.language.code.toLowerCase() as Language;
          if (translationLang === "es" || translationLang === "en") {
            paths.push({
              params: { slug: `${translationLang}/${translation.slug}` },
              props: {
                post: {
                  ...post,
                  title: translation.title,
                  slug: translation.slug,
                },
                lang: translationLang,
                type: "post",
              },
            });
          }
        });
      }

      return paths;
    });

    return paths;
  } catch (error) {
    console.error("Error generating static paths:", error);
    return [];
  }
}

const { slug } = Astro.params;
const { post, lang, type } = Astro.props;

// If no props were passed (fallback case), try to fetch the post
let finalPost: WordPressPost | null = post;
let finalLang: Language = lang;

if (!finalPost && slug) {
  const slugParts = slug.split("/");
  if (slugParts.length >= 2) {
    const [langParam, ...postSlugParts] = slugParts;
    const postSlug = postSlugParts.join("/");
    finalLang =
      langParam === "es" || langParam === "en" ? (langParam as Language) : "en";

    try {
      finalPost = await wordpressClient.getPostBySlug(postSlug);
    } catch (error) {
      console.error("Error fetching post:", error);
    }
  }
}

// Handle case where post is not found
if (!finalPost) {
  return new Response(null, {
    status: 404,
    statusText: "Not Found",
  });
}

const t = translations[finalLang];
const pageTitle = finalPost.title;
const pageDescription =
  finalLang === "es"
    ? `Lee "${finalPost.title}" - un poema en Arawi Aura`
    : `Read "${finalPost.title}" - a poem on Arawi Aura`;

// Get translation slug if available
const translationSlug = wordpressClient.getTranslationSlug(
  finalPost,
  finalLang === "es" ? "en" : "es"
);
---

<MainLayout
  title={pageTitle}
  description={pageDescription}
  lang={finalLang}
  canonicalPath={`/${slug}/`}
>
  <WordPressPostComponent
    post={finalPost}
    lang={finalLang}
    translationSlug={translationSlug}
  />
</MainLayout>
